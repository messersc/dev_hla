{
    "contents" : "options(stringsAsFactors = FALSE)\nsetwd(\"/vol/cs02/scratch/cmessers/projects/BIH/HLA\")\nlibrary(stringr)\n\nbuild_ref_table <- function(){\n# To generate the ref table\n  ref <- read.csv(\"/vol/cs02/scratch/cmessers/projects/BIH/HLA/metadata/nar-02838-met-k-2014-File005.csv\", header=FALSE)\n  ref = head(ref, -2) #remove last 2 lines! Rubbish in there.\n  rownames(ref) = make.names(ref[, 1], unique = T)\n  colnames(ref) = make.names(ref[2, ], unique = T)\n  ref = ref[3:nrow(ref), grep(pattern = \".*reference\", ref[2, ])]\n  write.table(ref, file = \"ref.csv\")\n}\n\n# load all result files\n# samples should be ordered. \nload_results <- function(d = getwd()){\n  build_ref_table()\n  ref <<- read.table(\"ref.csv\", header=TRUE, quote=\"\\\"\")\n  bwakit <<- read.table(\"bwakit\", quote=\"\\\"\", row.names=1)[1:6]\n  hlassign <<- read.table(\"hlassign\", quote=\"\\\"\", row.names=1)\n  optitype <<- read.table(\"optitype\", quote=\"\\\"\", row.names=1)\n}\n\nfit_allele_to_precision <- function(str, regex, ncolon){\n  if (str == \"0\") {\n    return(\"nottyped\")\n  } else if (sum(str_count(str, pattern=\":\")) >= ncolon) {\n   return(gsub(regex, replacement = '\\\\1', str))\n  } else {\n    return(\"nottyped\")\n  }\n}\n\ncompare_allele_pairs <- function(x,y){\n  s = sum(x %in% y)\n  # test for homozygosity\n  if (x[1] == x[2]) if (s == 2) s = s - length(setdiff(y,x))\n  return(s)\n}\n\nbuild_performance_table <- function(typer = c(\"optitype\", \"bwakit\", \"hlassign\"), precision=\"4d\"){\n  \n  if (precision == \"2d\"){ pattern = \"(^[ABC]\\\\*[0-9]{2}).*\" ; ncolon = 0}\n  else if (precision == \"4d\"){ pattern = \"(^[ABC]\\\\*[0-9]{2}:[0-9]{2,3}).*\" ; ncolon = 1}\n  else if (precision == \"8d\"){ pattern = \"(.*).*\" ; ncolon = 3}\n  else return('STOP')\n  \n  #get consensus/sample names/IDs\n  samples=row.names(bwakit)\n  # sort and filter reference according to results\n  xref <<- ref[match(samples, rownames(ref)), 1:6]\n  \n  for (x in c(\"xref\", typer)){\n    assign(x, apply(get(x), c(1,2), fit_allele_to_precision, pattern, ncolon)) #cellwise trimming of type to wanted precision\n    write.table(file=paste(precision,x, sep = \".\"), get(x), col.names = F, quote = F)\n  }\n  \n  # for manual inspection and comparisons\n  all_alleles = xref\n  for (x in typer){\n    all_alleles = cbind(all_alleles, get(typer))\n    \n  }\n  \n  #build matrix\n  acc = matrix(0, nrow=length(samples), ncol = length(typer)+1)\n  rownames(acc) = samples\n  colnames(acc) = c(typer, \"possible hits\")\n  acc[, ncol(acc)] = apply(xref, 1, function(x) sum(x != \"nottyped\"))\n  \n  typercount = 0\n  for (x in typer){\n    hits = rep(0, length(samples))\n    for (a in c(1,3,5)){ # diploid organisms are fun...\n      pred = get(x)\n      hits = hits + sapply(1:nrow(xref), function(i) compare_allele_pairs(pred[i,a:(a+1)], xref[i,a:(a+1)]))\n    }\n    typercount = typercount + 1\n    acc[ ,typercount] = hits\n  }\n  return(list(\"accordance\" = acc, \"all_alleles\" = all_alleles))\n}\n\nload_results()\nacc = build_performance_table(prec='4d')\nacc1 = acc[[1]]\nacc2 = acc[[2]]\n",
    "created" : 1442245800017.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1522923373",
    "id" : "1A00BB27",
    "lastKnownWriteTime" : 1442302208,
    "path" : "/vol/cs02/scratch/cmessers/projects/BIH/HLA/dev/accordance.R",
    "project_path" : "dev/accordance.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}